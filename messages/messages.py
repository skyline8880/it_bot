import datetime as dt

from aiogram.utils import markdown


def admin_menu():
    return markdown.text(
    markdown.markdown_decoration.quote(
        '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'),
    sep='\n')


def admin_or_executor_menu(act_lvl1):
    position = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if int(act_lvl1) == 1 else "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
    return markdown.text(
    markdown.markdown_decoration.quote(
        f'–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ {position}'),
    sep='\n')


def enter_phone_menu(act_lvl1, act_lvl2):
    position = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if int(act_lvl1) == 1 else "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
    action = "–¥–æ–±–∞–≤–∏—Ç—å" if int(act_lvl2) == 1 else "—É–¥–∞–ª–∏—Ç—å"
    return markdown.text(
    markdown.markdown_decoration.quote(
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä {position},'),
    markdown.markdown_decoration.quote(
        f'–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ {action}'),
    sep='\n')


def required_phone():
    return markdown.text(
    markdown.markdown_decoration.quote(
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!'),
    sep='\n')


def undefined_phone():
    return markdown.text(
    markdown.markdown_decoration.quote(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!'),
    sep='\n')


def addremm_opreation_success(act_lvl1, act_lvl2, phone):
    position = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if int(act_lvl1) == 1 else "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
    action = "–î–æ–±–∞–≤–ª–µ–Ω" if int(act_lvl2) == 1 else "–£–¥–∞–ª–µ–Ω"
    return markdown.text(
    markdown.markdown_decoration.quote(
        f'{action} {position}'),
    markdown.text(
        markdown.markdown_decoration.quote(
            'c –Ω–æ–º–µ—Ä–æ–º:'),
        markdown.code(phone)),
    sep='\n')


def start_menu():
    return markdown.text(
    markdown.markdown_decoration.quote(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –≤ –∫–æ—Ç–æ—Ä–æ–º'),
    markdown.markdown_decoration.quote(
        '—Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:'),
    sep='\n')


def detail_desc(dep_name: str):
    return markdown.text(
    markdown.markdown_decoration.quote(
        f'–í—ã–±—Ä–∞–Ω: {dep_name}.'),
    markdown.markdown_decoration.quote(
        '–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏'),
    markdown.markdown_decoration.quote(
        '–∏ —É–∫–∞–∂–∏—Ç–µ –≥–¥–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏.'),
    sep='\n')


def now_description_message() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            'üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:'),
        sep='\n')


def invalid_qr_format() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞'),
        sep='\n')


def operation_cancelled() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'),
        sep='\n')


def request_cancelled() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚ùå –¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'),
        sep='\n')


def equipment_not_found() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚ùå –î–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'),
        sep='\n')


def profile_not_found() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'),
        sep='\n')


def request_sent_success() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'),
        sep='\n')


def request_error() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏'),
        sep='\n')


def processing_error() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏'),
        sep='\n')


def start_instruction() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            'üîç –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.'),
        sep='\n')


def scan_qr_message() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥'),
        sep='\n')


def need_auth(name) -> str:
    if name is None:
        name = "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    return markdown.text(
        markdown.text(
            markdown.markdown_decoration.quote('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,'),
            f'{markdown.bold(name)} '),
        markdown.markdown_decoration.quote(
            '–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.'),
        markdown.markdown_decoration.quote(
            '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üîΩ'),
        sep='\n')


def accept_contact() -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞.'),
        sep='\n')


def sample_key_break(sample: str, element: str) -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            '–ù–∞—Ä—É—à–µ–Ω —à–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞!'),
        markdown.text(
            markdown.markdown_decoration.quote('–û–∂–∏–¥–∞–µ—Ç:'),
            f'{markdown.bold(sample)} '),
        markdown.text(
            markdown.markdown_decoration.quote('–ü–µ—Ä–µ–¥–∞–Ω:'),
            f'{markdown.bold(element)} '),
        markdown.text(
            markdown.markdown_decoration.quote(
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.'),
            ),
        sep='\n')


def sample_value_break(key: str, value: str) -> str:
    return markdown.text(
        markdown.markdown_decoration.quote(
            ''),
        markdown.text(
            markdown.markdown_decoration.quote('–î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:'),
            f'{markdown.bold(key)} '),
        markdown.text(
            markdown.markdown_decoration.quote(
                '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:'),
            f'{markdown.bold(value)} '),
        markdown.text(
            markdown.markdown_decoration.quote(
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.'),
            ),
        sep='\n')


def sample_key_value_pair_break(element: str) -> str:
    return markdown.text(
        markdown.text(
            markdown.markdown_decoration.quote(
                '–ù–∞—Ä—É—à–µ–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:'),
            f'{markdown.bold(element)}'),
        markdown.text(
            markdown.markdown_decoration.quote(
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.'),
            ),
        sep='\n')


def wrong_sample() -> str:
    return markdown.text(
        markdown.text(
            markdown.markdown_decoration.quote(
                '–ó–∞–ø—Ä–æ—Å –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É!')),
        markdown.text(
            markdown.markdown_decoration.quote(
                '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ.'),
            ),
        sep='\n')


def accept_request(sent) -> str:
    msg = markdown.text(
        markdown.markdown_decoration.quote(
            '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!'),
        sep='\n')
    if not sent:
        msg = markdown.text(
            markdown.markdown_decoration.quote(
                '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞!'),
            sep='\n')
    return msg


def request_form(data: tuple) -> str:
    (
        request_id,
        create_date,
        department_id,
        department_name,
        floor_id,
        floor_name,
        zone_id,
        zone_name,
        btype_id,
        btype_name,
        message_id,
        creator,
        employee_id,
        employee_is_admin,
        employee_phone,
        employee_full_name,
        employee_username,
        request_description,
        request_file_id,
        status_id,
        status,
        executor_id,
        executor_is_admin,
        executor_phone,
        executor_full_name,
        executor_username
    ) = data
    req_id = f"{message_id}/{creator}"
    if employee_full_name is None:
        employee_full_name = "<–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–æ–∑–Ω–∞—á–∏–ª>"
    if employee_username is None:
        employee_username = "<–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–æ–∑–Ω–∞—á–∏–ª>"
    if request_description is None or request_description == "":
        request_description = "<–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ>"
    if executor_phone is None:
        executor_phone = "<–ù–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É>"
    if executor_full_name is None:
        executor_full_name = ""
    if executor_username is None:
        executor_username = ""
    create_date = dt.datetime.strftime(create_date, format="%d.%m.%Y –≤ %H:%M")
    STATUSES = {
        1: '‚¨ú',
        2: 'üî≥',
        3: '‚úÖ'
    }
    return markdown.text(
        markdown.text(
            markdown.markdown_decoration.quote(
                f'‚ñ™Ô∏è {status} {STATUSES[status_id]}')),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –ó–∞–ø—Ä–æ—Å ‚Ññ:'),
            markdown.code(req_id)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –°–æ–∑–¥–∞–Ω:'),
            markdown.bold(create_date)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω:'),
            markdown.code(employee_phone)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –ò–º—è:'),
            markdown.bold(employee_full_name)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –ù–∏–∫–Ω–µ–π–º:'),
            markdown.code(employee_username)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'),),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –ö–ª—É–±:'),
            markdown.bold(department_name)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –≠—Ç–∞–∂:'),
            markdown.bold(floor_name)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –ó–æ–Ω–∞:'),
            markdown.bold(zone_name)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –ü–æ–ª–æ–º–∫–∞:'),
            markdown.bold(btype_name)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'),),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ:'),
            markdown.bold(request_description)),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'),),
        markdown.text(
            markdown.markdown_decoration.quote(
                '‚ñ™Ô∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:'),
            markdown.code(executor_phone)),
        markdown.text(
            markdown.bold(executor_full_name),
            markdown.code(executor_username)
            ),
        sep='\n')
